@page "/AllStudents/ViewStudent/{Id}"
@using Project.Avalon.Shared.Models
@using Project.Avalon.Web.Services.Students
@inject AllStudentsService _AllStudentService
@inject SemesterStudentsService _SemesterStudentService
@inject SelectedStudentsService _SelectedStudentService
@inject NavigationManager _navigationManager
@inject ISnackbar Snackbar

<MudPaper Class="pa-8 ma-5" Elevation="3">
     <MudText Class="mb-2"><h1><strong>@Student.Name</strong></h1></MudText>
      <MudText><MudIcon Icon="@Icons.Material.Filled.School" Size="Size.Small" /> Studies at @Student.University</MudText>
      <MudText><MudIcon Icon="@Icons.Material.Filled.CardMembership" Size="Size.Small" /> Assigned ID is @Student.Id</MudText>
      <MudText><MudIcon Icon="@Icons.Material.Filled.Email" Size="Size.Small" /> Send email through <strong><a href="mailto:@Student.Email"> @Student.Email</a></strong></MudText>
    <MudText><MudIcon Icon="@Icons.Material.Filled.Book" Size="Size.Small" /> Majoring in @Student.Major</MudText>
    @if (Student.Minor == null)
                    {
                    } else
                    {
                        <MudText><MudIcon Icon="@Icons.Filled.BookmarkBorder" Size="Size.Small" /> Minoring in @Student.Minor</MudText>
                    }
    @if (Student.Concentration == null)
                    {
                    } else
                    {
                        <MudText><MudIcon Icon="@Icons.Material.Filled.PushPin" Size="Size.Small" /> Concentrated on @Student.Concentration</MudText>
                    }
     <MudText><MudIcon Icon="@Icons.Material.Filled.Business" Size="Size.Small" /> Is affiliated with @Student.College</MudText>
     <MudText><MudIcon Icon="@Icons.Material.Filled.ContactPhone" Size="Size.Small" /> @Student.Department can be contacted</MudText>
     <MudText><MudIcon Icon="@Icons.Material.Filled.CalendarMonth" Size="Size.Small" /> Admitted in @Student.AdmitTerm Semester</MudText>
     <MudText><MudIcon Icon="@Icons.Material.Filled.Score" Size="Size.Small" /> Has @Student.GPA.ToString("N2") GPA</MudText>
     <MudText><MudIcon Icon="@Icons.Material.Filled.IncompleteCircle" Size="Size.Small" /> Completed @Student.CreditsCompleted Credits</MudText>
     <MudText><MudIcon Icon="@Icons.Material.Filled.Grading" Size="Size.Small" /> Expected to graduate on @GradDate</MudText>
     @if(Student.HasGoodAcademicStanding == true)
                    {
                    <MudText><MudIcon Icon="@Icons.Filled.Check" Color="Color.Success" Size="Size.Small" /> Has a good academic standing</MudText>
                    }
                    else
                    {
                    <MudText><MudIcon Icon="@Icons.Filled.Error" Color="Color.Error" Size="Size.Small" /> Does not have a good academic standing</MudText>
                    }
      @if(Student.IsInCurrentTerm == false)
    {
        <MudButton Class="mt-4 mr-4" OnClick="SelectForCurrentTerm" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.EmojiPeople" Color="Color.Success">ADD TO SEMESTER STUDENTS</MudButton>
    }
    else
    {
        <MudButton Class="mt-4 mr-4" OnClick="UnSelectForCurrentTerm" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.RemoveCircle" Color="Color.Dark">REMOVE STUDENT FROM SEMESTER STUDENTS</MudButton>
    }
    @if(Student.IsSelectedForReferral== false)
    {
        <MudButton Class="mt-4 mr-4" OnClick="SelectForReferral" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Star" Color="Color.Success">SELECT FOR REFERRAL</MudButton>
    }
    else
    {
        <MudButton Class="mt-4 mr-4" OnClick="UnSelectForReferral" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.RemoveCircle" Color="Color.Dark">REMOVE STUDENT FROM REFERRALS</MudButton>
    }
    <MudButton Class="mt-4 mr-4" Href="@($"/AllStudents/EditStudent/{Student.Id}")" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Edit" Color="Color.Warning">EDIT STUDENT</MudButton>
    <MudButton Class="mt-4 mr-4" Variant="Variant.Filled" Href="@($"/AllStudents/DeleteStudent/{Student.Id}")" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error">REMOVE STUDENT</MudButton>
 </MudPaper>

@code {
    [Parameter] public string Id { get; set; }

    All Student = new All();
    Current Semester = new Current();
    Selected Referral = new Selected();

    String GradDate = new String("");

    protected override async Task OnInitializedAsync()
    {
        Student = await Task.Run(() => _AllStudentService.GetEachStudentBasedOnIdAsync(Id));
        Semester = await Task.Run(() => _SemesterStudentService.GetEachStudentOfThisSemesterBasedOnIdAsync(Id));
        Referral = await Task.Run(() => _SelectedStudentService.GetEachSelectedStudentSemesterBasedOnIdAsync(Id));

        GradDate = Student.GraduationDate.ToString().Substring(0,Student.GraduationDate.ToString().IndexOf(" "));
    }

    protected async void SelectForCurrentTerm()
    {
        Student.IsInCurrentTerm = true;
        if (Semester == null)
        {
            await _AllStudentService.AddToCurrentStudents(Student);
        }
        _navigationManager.NavigateTo("/AllStudents/ViewStudent/"+Student.Id);
        Snackbar.Add("Student successfully added to current semester", Severity.Success);
    }

    protected async void UnSelectForCurrentTerm()
    {
        Student.IsInCurrentTerm = false;
        if (Semester != null)
        {
            await _SemesterStudentService.DeleteCurrentStudentAsync(Semester);
        }
        _navigationManager.NavigateTo("/AllStudents/ViewStudent/"+Student.Id);
        Snackbar.Add("Student successfully removed from current semester", Severity.Success);
    }

    protected async void SelectForReferral()
    {
        Student.IsSelectedForReferral = true;
        if (Referral == null)
        {
            await _AllStudentService.SelectForReferralFromAll(Student);
        }
        _navigationManager.NavigateTo("/AllStudents/ViewStudent/"+Student.Id);
        Snackbar.Add("Student successfully selected for referral", Severity.Success);
    }

    protected async void UnSelectForReferral()
    {
        Student.IsSelectedForReferral = false;
        if (Referral != null)
        {
            await _SelectedStudentService.DeleteSelectedStudentAsync(Referral);
        }
        _navigationManager.NavigateTo("/AllStudents/ViewStudent/"+Student.Id);
        Snackbar.Add("Student successfully removed from referral list", Severity.Success);
    }
}
